module Mod

type mylist

let cons : forall a. a -> mylist a -> mylist a = coerce 0
# nil is immutable, so following signature is okay
let nil : forall a. mylist a = coerce 0

let list1 = cons 2 (cons 1 nil)

let functor : forall f.
              value f -> value ({map : forall u1 u2. (u1 -> u2) -> f u1 -> f u2}) =
    fun _  -> typeval exist _'. _'

let list_functor : valtype functor list = {map = coerce 0}
tellme list_functor

let map1 =
    # higher rank types should be annotated
    | inst : valtype functor list  | -> | func | ->
    let x = inst.map in
    inst.map func

tellme map1

let polymap =
    | inst | -> | func | -> | data | -> inst.map func data

tellme polymap

# let _ = polymap list_functor

# let polymap : forall f a b. (valtype functor f) -> (a -> b) -> f a -> f b =
#    | inst | -> | func | -> | data | -> inst.map func data

# tellme polymap
# tellme list_functor
# let ret = polymap list_functor

# let monomap : forall f. (valtype functor f) -> exist _ . _ =
#        | inst: {map : forall f. valtype functor f } | -> coerce 0

# let ret' = monomap list_functor