module Mod

type mylist

let cons : forall a. a -> mylist a -> mylist a = coerce 0
# nil is immutable, so following signature is okay
let nil : forall a. mylist a = coerce 0

let list1 = cons 2 (cons 1 nil)

let functor : forall f . value f -> value {map : forall u1 u2.(u1 -> u2) -> f u1 -> f u2} =
    | _ | -> val exist _'. _'

let list_functor : val functor list = coerce 0
let polymap : forall f . (val functor f) -> forall a b. (a -> b) -> f a -> f b =
        | inst | -> inst.map

let ret = polymap list_functor


let monomap : forall f x y. (val functor f) -> (x -> y) -> f x -> f y =
        | inst: (val functor f) | -> | func | -> | data | -> inst.map func data

let ret' = monomap list_functor