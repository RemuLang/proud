# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(INT='[-+]?\\d+'), r(FLOAT='[-+]?[0-9]+\\.\\d+([eE][-+]?\\d+)?|[-+]?[0-9]+[eE][-+]?\\d+'), r(UPPER='[A-Z][a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(LOWER='[a-z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(STRING='"([^\\\\"]+|\\\\.)*?"'), r(SPECIAL='\\-\\>|\\=\\>|\\=|\\=\\='), r(OP='[\\+\\-\\*\\/\\@\\~\\%\\>\\<][\\+\\-\\*\\/\\@\\~\\%\\>\\<\\:\\|\\=\\^]*'), r(SOP='\\|[\\+\\-\\*\\/\\@\\~\\%\\>\\<\\:\\|\\=\\^]+'), r(COMMENT='#[^\\n\\r]*'), r(W='\\s+'), l['}'], l['|'], l['{'], l['`'], l['^'], l[']'], l['['], l['::'], l[':'], l['.'], l[','], l[')'], l['('], l['$'], ignores=['W', 'COMMENT'], reserved_map=ImmutableMap.from_dict({'module': 'quote module', 'let': 'quote let', '=': 'quote =', ':': 'quote :', 'export': 'quote export', 'type': 'quote type', ',': 'quote ,', '|': 'quote |', '(': 'quote (', ')': 'quote )', '->': 'quote ->', '^': 'quote ^', 'when': 'quote when', '[': 'quote [', ']': 'quote ]', '{': 'quote {', '}': 'quote }', 'and': 'quote and', 'or': 'quote or', '::': 'quote ::', '==': 'quote ==', 'in': 'quote in', 'rec': 'quote rec', 'match': 'quote match', 'mutual': 'quote mutual', 'True': 'quote True', 'False': 'quote False', '`': 'quote `', '$': 'quote $', '.': 'quote .', 'coerce': 'quote coerce', 'forall': 'quote forall', 'exist': 'quote exist', '=>': 'quote =>'}), numbering={'BOF': 0, 'EOF': 1, 'quote module': 2, 'quote let': 3, 'quote =': 4, 'quote :': 5, 'quote export': 6, 'quote type': 7, 'quote ,': 8, 'quote |': 9, 'quote (': 10, 'quote )': 11, 'quote ->': 12, 'quote ^': 13, 'quote when': 14, 'quote [': 15, 'quote ]': 16, 'quote {': 17, 'quote }': 18, 'quote and': 19, 'quote or': 20, 'quote ::': 21, 'quote ==': 22, 'quote in': 23, 'quote rec': 24, 'quote match': 25, 'quote mutual': 26, 'quote True': 27, 'quote False': 28, 'quote `': 29, 'quote $': 30, 'quote .': 31, 'quote coerce': 32, 'quote forall': 33, 'quote exist': 34, 'quote =>': 35, 'INT': 36, 'FLOAT': 37, 'UPPER': 38, 'LOWER': 39, 'STRING': 40, 'SPECIAL': 41, 'OP': 42, 'SOP': 43, 'COMMENT': 44, 'W': 45})



def mk_parser(mutual_k, lit_k, coerce_k, module_k, def_k, let_k, type_k, and_k, or_k, quote_k, unquote_k, lambda_k, match_k, ann_k, bin_k, case_k, list_k, tuple_k, record_k, call_k, arrow_k, imply_k, loc_k, forall_k, exist_k, guard_k, pin_k, uncall_k, alias_k, attr_k, loc_, DQString):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil
    mutual__k = mutual_k
    lit__k = lit_k
    coerce__k = coerce_k
    module__k = module_k
    def__k = def_k
    let__k = let_k
    type__k = type_k
    and__k = and_k
    or__k = or_k
    quote__k = quote_k
    unquote__k = unquote_k
    lambda__k = lambda_k
    match__k = match_k
    ann__k = ann_k
    bin__k = bin_k
    case__k = case_k
    list__k = list_k
    tuple__k = tuple_k
    record__k = record_k
    call__k = call_k
    arrow__k = arrow_k
    imply__k = imply_k
    loc__k = loc_k
    forall__k = forall_k
    exist__k = exist_k
    guard__k = guard_k
    pin__k = pin_k
    uncall__k = uncall_k
    alias__k = alias_k
    attr__k = attr_k
    loc__ = loc_

    def lr_step_and__pat(_slot_0, prim__state, prim__tokens):
        lcl_0 = 19
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote and not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_primitive__pat(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                lcl_2 = (and__k, lcl_2, lcl_3)
                lcl_3 = _slot_1
                lcl_2 = loc__(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_and__pat(_slot_0, prim__state, prim__tokens):
        lr_and__pat_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_and__pat(lr_and__pat_reduce, prim__state, prim__tokens)
        lr_and__pat_try = lcl_0
        lcl_0 = lr_and__pat_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_and__pat_try[1]
            lcl_1 = lcl_1
            lr_and__pat_reduce = lcl_1
            lcl_1 = lr_step_and__pat(lr_and__pat_reduce, prim__state, prim__tokens)
            lr_and__pat_try = lcl_1
            lcl_1 = lr_and__pat_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_and__pat_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_and__pat_try
        return lcl_0

    def lr_step_atom(_slot_0, prim__state, prim__tokens):
        lcl_0 = 31
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = 39
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_1):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_1 = _py_local_tk
            _slot_2 = lcl_1
            lcl_1 = (_slot_2 is None)
            if lcl_1:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, 'LOWER not match')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                lcl_3 = lcl_3.value
                lcl_2 = (attr__k, lcl_2, lcl_3)
                lcl_3 = _slot_1
                lcl_2 = loc__(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_atom(_slot_0, prim__state, prim__tokens):
        lr_atom_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_atom(lr_atom_reduce, prim__state, prim__tokens)
        lr_atom_try = lcl_0
        lcl_0 = lr_atom_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_atom_try[1]
            lcl_1 = lcl_1
            lr_atom_reduce = lcl_1
            lcl_1 = lr_step_atom(lr_atom_reduce, prim__state, prim__tokens)
            lr_atom_try = lcl_1
            lcl_1 = lr_atom_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_atom_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_atom_try
        return lcl_0

    def lr_step_call__expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 32):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 29):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 27):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 28):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_2_check = lcl_3
                lcl_3 = _slot_2_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_2_check
                else:
                    lcl_4 = _slot_2_check[1]
                    lcl_4 = lcl_4
                    _slot_2 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_2
                    lcl_4 = (ann__k, lcl_4, lcl_5)
                    lcl_5 = _slot_1
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 30):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 36):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 37):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    lcl_4 = (call__k, lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'call_expr lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'call_expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_call__expr(_slot_0, prim__state, prim__tokens):
        lr_call__expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
        lr_call__expr_try = lcl_0
        lcl_0 = lr_call__expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_call__expr_try[1]
            lcl_1 = lcl_1
            lr_call__expr_reduce = lcl_1
            lcl_1 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
            lr_call__expr_try = lcl_1
            lcl_1 = lr_call__expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_call__expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_call__expr_try
        return lcl_0

    def lr_step_expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = 25
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote match not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_rbnf__list__6(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                lcl_3 = tuple(lcl_3)
                lcl_2 = (match__k, lcl_2, lcl_3)
                lcl_3 = _slot_1
                lcl_2 = loc__(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_expr(_slot_0, prim__state, prim__tokens):
        lr_expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
        lr_expr_try = lcl_0
        lcl_0 = lr_expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_expr_try[1]
            lcl_1 = lcl_1
            lr_expr_reduce = lcl_1
            lcl_1 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
            lr_expr_try = lcl_1
            lcl_1 = lr_expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_expr_try
        return lcl_0

    def lr_step_pat(_slot_0, prim__state, prim__tokens):
        lcl_0 = 20
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote or not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_and__pat(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                lcl_2 = (or__k, lcl_2, lcl_3)
                lcl_3 = _slot_1
                lcl_2 = loc__(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_pat(_slot_0, prim__state, prim__tokens):
        lr_pat_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_pat(lr_pat_reduce, prim__state, prim__tokens)
        lr_pat_try = lcl_0
        lcl_0 = lr_pat_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_pat_try[1]
            lcl_1 = lcl_1
            lr_pat_reduce = lcl_1
            lcl_1 = lr_step_pat(lr_pat_reduce, prim__state, prim__tokens)
            lr_pat_try = lcl_1
            lcl_1 = lr_pat_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_pat_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_pat_try
        return lcl_0

    def lr_step_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_top__level(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__0_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
        lr_rbnf__list__0_try = lcl_0
        lcl_0 = lr_rbnf__list__0_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__0_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__0_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
            lr_rbnf__list__0_try = lcl_1
            lcl_1 = lr_rbnf__list__0_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__0_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__0_try
        return lcl_0

    def lr_step_rbnf__list__1(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_constr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__1(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__1_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__1(lr_rbnf__list__1_reduce, prim__state, prim__tokens)
        lr_rbnf__list__1_try = lcl_0
        lcl_0 = lr_rbnf__list__1_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__1_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__1_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__1(lr_rbnf__list__1_reduce, prim__state, prim__tokens)
            lr_rbnf__list__1_try = lcl_1
            lcl_1 = lr_rbnf__list__1_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__1_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__1_try
        return lcl_0

    def lr_step_rbnf__list__10(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_ID(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__10(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__10_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__10(lr_rbnf__list__10_reduce, prim__state, prim__tokens)
        lr_rbnf__list__10_try = lcl_0
        lcl_0 = lr_rbnf__list__10_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__10_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__10_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__10(lr_rbnf__list__10_reduce, prim__state, prim__tokens)
            lr_rbnf__list__10_try = lcl_1
            lcl_1 = lr_rbnf__list__10_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__10_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__10_try
        return lcl_0

    def lr_step_rbnf__list__5(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_binary__trailer(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__5(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__5_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__5(lr_rbnf__list__5_reduce, prim__state, prim__tokens)
        lr_rbnf__list__5_try = lcl_0
        lcl_0 = lr_rbnf__list__5_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__5_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__5_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__5(lr_rbnf__list__5_reduce, prim__state, prim__tokens)
            lr_rbnf__list__5_try = lcl_1
            lcl_1 = lr_rbnf__list__5_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__5_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__5_try
        return lcl_0

    def lr_step_rbnf__list__6(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_case(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__6(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__6_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__6(lr_rbnf__list__6_reduce, prim__state, prim__tokens)
        lr_rbnf__list__6_try = lcl_0
        lcl_0 = lr_rbnf__list__6_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__6_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__6_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__6(lr_rbnf__list__6_reduce, prim__state, prim__tokens)
            lr_rbnf__list__6_try = lcl_1
            lcl_1 = lr_rbnf__list__6_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__6_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__6_try
        return lcl_0

    def lr_step_rbnf__sep__list__11(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_type__pair(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__11(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__11_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__11(lr_rbnf__sep__list__11_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__11_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__11_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__11_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__11_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__11(lr_rbnf__sep__list__11_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__11_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__11_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__11_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__11_try
        return lcl_0

    def lr_step_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_type(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__2_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__2_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__2_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__2_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__2_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__2_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__2_try
        return lcl_0

    def lr_step_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_pat(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__3_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__3_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__3_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__3_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__3_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__3_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__3_try
        return lcl_0

    def lr_step_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_pat__pair(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__4_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__4_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__4_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__4_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__4_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__4_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__4_try
        return lcl_0

    def lr_step_rbnf__sep__list__7(_slot_0, prim__state, prim__tokens):
        lcl_0 = 19
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote and not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_mutual__case(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__7(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__7_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__7(lr_rbnf__sep__list__7_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__7_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__7_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__7_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__7_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__7(lr_rbnf__sep__list__7_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__7_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__7_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__7_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__7_try
        return lcl_0

    def lr_step_rbnf__sep__list__8(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__8(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__8_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__8(lr_rbnf__sep__list__8_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__8_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__8_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__8_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__8_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__8(lr_rbnf__sep__list__8_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__8_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__8_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__8_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__8_try
        return lcl_0

    def lr_step_rbnf__sep__list__9(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr__pair(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__9(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__9_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__9(lr_rbnf__sep__list__9_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__9_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__9_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__9_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__9_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__9(lr_rbnf__sep__list__9_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__9_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__9_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__9_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__9_try
        return lcl_0

    def lr_step_type__app(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atom__type(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            lcl_1 = (call__k, lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_type__app(_slot_0, prim__state, prim__tokens):
        lr_type__app_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_type__app(lr_type__app_reduce, prim__state, prim__tokens)
        lr_type__app_try = lcl_0
        lcl_0 = lr_type__app_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_type__app_try[1]
            lcl_1 = lcl_1
            lr_type__app_reduce = lcl_1
            lcl_1 = lr_step_type__app(lr_type__app_reduce, prim__state, prim__tokens)
            lr_type__app_try = lcl_1
            lcl_1 = lr_type__app_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_type__app_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_type__app_try
        return lcl_0

    def parse_ID(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 38):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'ID lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ID got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_module__def(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_and__pat(prim__state, prim__tokens):
        lcl_0 = parse_primitive__pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_and__pat(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_arrow__type(prim__state, prim__tokens):
        lcl_0 = parse_type__app(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 35):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_type(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_5 = (imply__k, lcl_5, lcl_6)
                        lcl_6 = _slot_1
                        lcl_5 = loc__(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 12):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_type(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_5 = (arrow__k, lcl_5, lcl_6)
                        lcl_6 = _slot_1
                        lcl_5 = loc__(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'arrow_type got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 18):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (record__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__9(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_row__expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_9 = _slot_2
                                lcl_8 = (record__k, lcl_8, lcl_9)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 32):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_4 = (coerce__k, lcl_4)
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 29):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_4 = (quote__k, lcl_4)
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 9):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 17):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 24):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 26):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 3):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 32):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 29):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (list__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 27):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 28):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 30):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 36):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 27):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (lit__k, True)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 28):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (lit__k, False)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 9):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 17):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 24):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 26):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 3):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 32):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 29):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 27):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 28):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 11):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (tuple__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 30):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 36):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_rbnf__sep__list__8(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 30):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_4 = (unquote__k, lcl_4)
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = DQString(lcl_3)
                lcl_3 = (lit__k, lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 36):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = int(lcl_3)
                lcl_3 = (lit__k, lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 37):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = float(lcl_3)
                lcl_3 = (lit__k, lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom__type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 18):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (record__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__11(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_row__type(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_9 = _slot_2
                                lcl_8 = (record__k, lcl_8, lcl_9)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom_type lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom_type got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 17):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 34):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = (list__k, None)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_type(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom_type lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom_type got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 17):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 34):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 11):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (tuple__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom_type lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom_type got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom_type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom_type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_binary__operations(prim__state, prim__tokens):
        lcl_0 = parse_call__expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 20):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 19):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 13):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 22):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 21):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 42):
                    lcl_4 = parse_rbnf__list__5(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_1
                        lcl_6 = tuple(lcl_6)
                        lcl_5 = (bin__k, lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'binary_operations got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_binary__operator(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 20):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 42):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'binary_operator lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'binary_operator got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_binary__trailer(prim__state, prim__tokens):
        lcl_0 = parse_binary__operator(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = parse_call__expr(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = _slot_0
                lcl_2 = lcl_2.value
                lcl_3 = _slot_0
                lcl_2 = loc__(lcl_2, lcl_3)
                lcl_3 = _slot_1
                lcl_2 = (lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_call__expr(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_call__expr(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_case(prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_pat(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 12
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'quote -> not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = parse_expr(prim__state, prim__tokens)
                    _slot_3_check = lcl_3
                    lcl_3 = _slot_3_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_3_check
                    else:
                        lcl_4 = _slot_3_check[1]
                        lcl_4 = lcl_4
                        _slot_3 = lcl_4
                        lcl_4 = _slot_1
                        lcl_5 = _slot_3
                        lcl_4 = (case__k, lcl_4, lcl_5)
                        lcl_5 = _slot_2
                        lcl_4 = loc__(lcl_4, lcl_5)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_constr(prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = 38
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_1):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_1 = _py_local_tk
            _slot_1 = lcl_1
            lcl_1 = (_slot_1 is None)
            if lcl_1:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, 'UPPER not match')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = prim__tokens.offset
                _off_2 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 5):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_5 = _py_local_t
                        _slot_2 = lcl_5
                        lcl_5 = parse_type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_4 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote -> not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = parse_type(prim__state, prim__tokens)
                                _slot_5_check = lcl_7
                                lcl_7 = _slot_5_check[0]
                                lcl_7 = (lcl_7 is False)
                                if lcl_7:
                                    lcl_7 = _slot_5_check
                                else:
                                    lcl_8 = _slot_5_check[1]
                                    lcl_8 = lcl_8
                                    _slot_5 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_8 = lcl_8.value
                                    lcl_9 = _slot_3
                                    lcl_10 = _slot_5
                                    lcl_10 = (arrow__k, lcl_9, lcl_10)
                                    lcl_10 = (ann__k, lcl_8, lcl_10)
                                    lcl_8 = _slot_1
                                    lcl_10 = loc__(lcl_10, lcl_8)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = (True, _slot_local__1)
                                    lcl_7 = lcl_10
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 10):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_10 = _py_local_t
                        _slot_2 = lcl_10
                        lcl_10 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
                        _slot_3_check = lcl_10
                        lcl_10 = _slot_3_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_3_check
                        else:
                            lcl_5 = _slot_3_check[1]
                            lcl_5 = lcl_5
                            _slot_3 = lcl_5
                            lcl_5 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_4 = lcl_5
                            lcl_5 = (_slot_4 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = _slot_1
                                lcl_6 = lcl_6.value
                                lcl_7 = _slot_3
                                lcl_7 = tuple(lcl_7)
                                lcl_6 = (call__k, lcl_6, lcl_7)
                                lcl_7 = _slot_1
                                lcl_6 = loc__(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_10 = lcl_5
                        lcl_3 = lcl_10
                    else:
                        lcl_10 = _slot_1
                        lcl_10 = lcl_10.value
                        lcl_5 = ()
                        lcl_10 = (call__k, lcl_10, lcl_5)
                        lcl_5 = _slot_1
                        lcl_10 = loc__(lcl_10, lcl_5)
                        _slot_local__1 = lcl_10
                        lcl_10 = (True, _slot_local__1)
                        lcl_3 = lcl_10
                    lcl_2 = lcl_3
                else:
                    lcl_10 = (_off_2, 'constr got EOF')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_2 = lcl_10
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_lambda(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 17):
                lcl_3 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_pat(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 4):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_2 = lcl_7
                            lcl_7 = parse_expr(prim__state, prim__tokens)
                            _slot_3_check = lcl_7
                            lcl_7 = _slot_3_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_3_check
                            else:
                                lcl_8 = _slot_3_check[1]
                                lcl_8 = lcl_8
                                _slot_3 = lcl_8
                                lcl_8 = 23
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_4 = lcl_8
                                lcl_8 = (_slot_4 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote in not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_9
                                    lcl_9 = _slot_5_check[0]
                                    lcl_9 = (lcl_9 is False)
                                    if lcl_9:
                                        lcl_9 = _slot_5_check
                                    else:
                                        lcl_10 = _slot_5_check[1]
                                        lcl_10 = lcl_10
                                        _slot_5 = lcl_10
                                        lcl_10 = _slot_1
                                        lcl_11 = _slot_3
                                        lcl_12 = _slot_5
                                        lcl_10 = (let__k, True, lcl_10, None, lcl_11, lcl_12)
                                        lcl_11 = _slot_0
                                        lcl_10 = loc__(lcl_10, lcl_11)
                                        _slot_local__1 = lcl_10
                                        lcl_10 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                        lcl_9 = lcl_10
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 5):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_10 = _py_local_t
                            _slot_2 = lcl_10
                            lcl_10 = parse_type(prim__state, prim__tokens)
                            _slot_3_check = lcl_10
                            lcl_10 = _slot_3_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_3_check
                            else:
                                lcl_11 = _slot_3_check[1]
                                lcl_11 = lcl_11
                                _slot_3 = lcl_11
                                lcl_11 = 4
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_11):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_11 = _py_local_tk
                                _slot_4 = lcl_11
                                lcl_11 = (_slot_4 is None)
                                if lcl_11:
                                    lcl_12 = prim__tokens.offset
                                    lcl_12 = (lcl_12, 'quote = not match')
                                    lcl_12 = prim__cons(lcl_12, prim__nil)
                                    lcl_12 = lcl_12
                                    lcl_12 = (False, lcl_12)
                                    lcl_11 = lcl_12
                                else:
                                    lcl_12 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_12
                                    lcl_12 = _slot_5_check[0]
                                    lcl_12 = (lcl_12 is False)
                                    if lcl_12:
                                        lcl_12 = _slot_5_check
                                    else:
                                        lcl_7 = _slot_5_check[1]
                                        lcl_7 = lcl_7
                                        _slot_5 = lcl_7
                                        lcl_7 = 23
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_7):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_7 = _py_local_tk
                                        _slot_6 = lcl_7
                                        lcl_7 = (_slot_6 is None)
                                        if lcl_7:
                                            lcl_8 = prim__tokens.offset
                                            lcl_8 = (lcl_8, 'quote in not match')
                                            lcl_8 = prim__cons(lcl_8, prim__nil)
                                            lcl_8 = lcl_8
                                            lcl_8 = (False, lcl_8)
                                            lcl_7 = lcl_8
                                        else:
                                            lcl_8 = parse_expr(prim__state, prim__tokens)
                                            _slot_7_check = lcl_8
                                            lcl_8 = _slot_7_check[0]
                                            lcl_8 = (lcl_8 is False)
                                            if lcl_8:
                                                lcl_8 = _slot_7_check
                                            else:
                                                lcl_9 = _slot_7_check[1]
                                                lcl_9 = lcl_9
                                                _slot_7 = lcl_9
                                                lcl_9 = _slot_1
                                                lcl_13 = _slot_3
                                                lcl_14 = _slot_5
                                                lcl_15 = _slot_7
                                                lcl_13 = (let__k, True, lcl_9, lcl_13, lcl_14, lcl_15)
                                                lcl_14 = _slot_0
                                                lcl_13 = loc__(lcl_13, lcl_14)
                                                _slot_local__1 = lcl_13
                                                lcl_13 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                                lcl_8 = lcl_13
                                            lcl_7 = lcl_8
                                        lcl_12 = lcl_7
                                    lcl_11 = lcl_12
                                lcl_10 = lcl_11
                            lcl_5 = lcl_10
                        else:
                            lcl_10 = (_off_1, 'expr lookahead failed')
                            lcl_10 = prim__cons(lcl_10, prim__nil)
                            lcl_10 = lcl_10
                            lcl_10 = (False, lcl_10)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    else:
                        lcl_10 = (_off_1, 'expr got EOF')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 26):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_rbnf__sep__list__7(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = 23
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_11):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_11 = _py_local_tk
                    _slot_2 = lcl_11
                    lcl_11 = (_slot_2 is None)
                    if lcl_11:
                        lcl_12 = prim__tokens.offset
                        lcl_12 = (lcl_12, 'quote in not match')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = parse_expr(prim__state, prim__tokens)
                        _slot_3_check = lcl_12
                        lcl_12 = _slot_3_check[0]
                        lcl_12 = (lcl_12 is False)
                        if lcl_12:
                            lcl_12 = _slot_3_check
                        else:
                            lcl_13 = _slot_3_check[1]
                            lcl_13 = lcl_13
                            _slot_3 = lcl_13
                            lcl_13 = _slot_1
                            lcl_14 = _slot_3
                            lcl_13 = (mutual__k, lcl_13, lcl_14)
                            lcl_14 = _slot_0
                            lcl_13 = loc__(lcl_13, lcl_14)
                            _slot_local__1 = lcl_13
                            lcl_13 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_13
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_pat(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 4):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_2 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_3_check = lcl_14
                            lcl_14 = _slot_3_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_3_check
                            else:
                                lcl_15 = _slot_3_check[1]
                                lcl_15 = lcl_15
                                _slot_3 = lcl_15
                                lcl_15 = 23
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_15):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_15 = _py_local_tk
                                _slot_4 = lcl_15
                                lcl_15 = (_slot_4 is None)
                                if lcl_15:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote in not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_15 = lcl_3
                                else:
                                    lcl_3 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_4 = _slot_5_check[1]
                                        lcl_4 = lcl_4
                                        _slot_5 = lcl_4
                                        lcl_4 = _slot_1
                                        lcl_5 = _slot_3
                                        lcl_6 = _slot_5
                                        lcl_4 = (let__k, False, lcl_4, None, lcl_5, lcl_6)
                                        lcl_5 = _slot_0
                                        lcl_4 = loc__(lcl_4, lcl_5)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                        lcl_3 = lcl_4
                                    lcl_15 = lcl_3
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 5):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_2 = lcl_14
                            lcl_14 = parse_type(prim__state, prim__tokens)
                            _slot_3_check = lcl_14
                            lcl_14 = _slot_3_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_3_check
                            else:
                                lcl_15 = _slot_3_check[1]
                                lcl_15 = lcl_15
                                _slot_3 = lcl_15
                                lcl_15 = 4
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_15):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_15 = _py_local_tk
                                _slot_4 = lcl_15
                                lcl_15 = (_slot_4 is None)
                                if lcl_15:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote = not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_15 = lcl_3
                                else:
                                    lcl_3 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_4 = _slot_5_check[1]
                                        lcl_4 = lcl_4
                                        _slot_5 = lcl_4
                                        lcl_4 = 23
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_4):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_4 = _py_local_tk
                                        _slot_6 = lcl_4
                                        lcl_4 = (_slot_6 is None)
                                        if lcl_4:
                                            lcl_5 = prim__tokens.offset
                                            lcl_5 = (lcl_5, 'quote in not match')
                                            lcl_5 = prim__cons(lcl_5, prim__nil)
                                            lcl_5 = lcl_5
                                            lcl_5 = (False, lcl_5)
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = parse_expr(prim__state, prim__tokens)
                                            _slot_7_check = lcl_5
                                            lcl_5 = _slot_7_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_7_check
                                            else:
                                                lcl_6 = _slot_7_check[1]
                                                lcl_6 = lcl_6
                                                _slot_7 = lcl_6
                                                lcl_6 = _slot_1
                                                lcl_7 = _slot_3
                                                lcl_8 = _slot_5
                                                lcl_9 = _slot_7
                                                lcl_6 = (let__k, False, lcl_6, lcl_7, lcl_8, lcl_9)
                                                lcl_7 = _slot_0
                                                lcl_6 = loc__(lcl_6, lcl_7)
                                                _slot_local__1 = lcl_6
                                                lcl_6 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    lcl_15 = lcl_3
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = (_off_1, 'expr lookahead failed')
                            lcl_14 = prim__cons(lcl_14, prim__nil)
                            lcl_14 = lcl_14
                            lcl_14 = (False, lcl_14)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'expr got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 32):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 29):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 15):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 27):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 28):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 10):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 30):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 38):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 40):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 39):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 36):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 37):
                lcl_10 = parse_binary__operations(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'expr lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr__pair(prim__state, prim__tokens):
        lcl_0 = 39
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'LOWER not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 4):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_5 = lcl_5.value
                        lcl_6 = _slot_2
                        lcl_5 = (lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = lcl_4.value
                    lcl_5 = _slot_0
                    lcl_5 = lcl_5.value
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'expr_pair got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_lambda(prim__state, prim__tokens):
        lcl_0 = parse_pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = parse_lambda__typed(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = parse_lambda__body(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_2 = _slot_2_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = lcl_3
                    _slot_2 = lcl_3
                    lcl_3 = _slot_0
                    lcl_4 = _slot_1
                    lcl_5 = _slot_2
                    lcl_3 = (lambda__k, lcl_3, lcl_4, lcl_5)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_lambda__body(prim__state, prim__tokens):
        lcl_0 = 12
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote -> not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = _slot_1
                lcl_3 = _slot_0
                lcl_2 = loc__(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_lambda__typed(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                _slot_local__1 = None
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 9
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote | not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'lambda_typed lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'lambda_typed got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_module__def(prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote module not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_ID(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = parse_rbnf__list__0(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_2 = _slot_2_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = lcl_3
                    _slot_2 = lcl_3
                    lcl_3 = _slot_1
                    lcl_4 = _slot_2
                    lcl_3 = (module__k, False, lcl_3, lcl_4)
                    lcl_4 = _slot_0
                    lcl_3 = loc__(lcl_3, lcl_4)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_mutual__case(prim__state, prim__tokens):
        lcl_0 = parse_pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = 4
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_1):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_1 = _py_local_tk
            _slot_1 = lcl_1
            lcl_1 = (_slot_1 is None)
            if lcl_1:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, 'quote = not match')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = parse_expr(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_2 = _slot_2_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = lcl_3
                    _slot_2 = lcl_3
                    lcl_3 = _slot_0
                    lcl_4 = _slot_2
                    lcl_3 = (lcl_3, lcl_4)
                    lcl_4 = _slot_1
                    lcl_3 = loc__(lcl_3, lcl_4)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_pat(prim__state, prim__tokens):
        lcl_0 = parse_and__pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_pat(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_pat__pair(prim__state, prim__tokens):
        lcl_0 = 39
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'LOWER not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 4):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_pat(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_5 = lcl_5.value
                        lcl_6 = _slot_2
                        lcl_5 = (lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = lcl_4.value
                    lcl_5 = _slot_0
                    lcl_5 = lcl_5.value
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'pat_pair got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_primitive__pat(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 18):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (record__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__4(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_row__pat(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_1
                                lcl_8 = tuple(lcl_8)
                                lcl_9 = _slot_2
                                lcl_8 = (record__k, lcl_8, lcl_9)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'primitive_pat lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'primitive_pat got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_4 = (guard__k, lcl_4)
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_1
                    lcl_4 = (pin__k, lcl_4)
                    lcl_5 = _slot_0
                    lcl_4 = loc__(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 17):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 13):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (list__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 36):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 16
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (list__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'primitive_pat lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'primitive_pat got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 17):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 13):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 15):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 11):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = ()
                        lcl_6 = (tuple__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 10):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 38):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 40):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 39):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 36):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = (tuple__k, lcl_8)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'primitive_pat lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'primitive_pat got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 10):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_2_check = lcl_6
                        lcl_6 = _slot_2_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_2_check
                        else:
                            lcl_7 = _slot_2_check[1]
                            lcl_7 = lcl_7
                            _slot_2 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_3 = lcl_7
                            lcl_7 = (_slot_3 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_0
                                lcl_8 = lcl_8.value
                                lcl_9 = _slot_2
                                lcl_8 = (call__k, lcl_8, lcl_9)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = _slot_0
                        lcl_6 = (call__k, lcl_6)
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'primitive_pat got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = DQString(lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 10):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
                        _slot_2_check = lcl_6
                        lcl_6 = _slot_2_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_2_check
                        else:
                            lcl_7 = _slot_2_check[1]
                            lcl_7 = lcl_7
                            _slot_2 = lcl_7
                            lcl_7 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_3 = lcl_7
                            lcl_7 = (_slot_3 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ) not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_0
                                lcl_8 = lcl_8.value
                                lcl_9 = _slot_2
                                lcl_8 = (uncall__k, lcl_8, lcl_9)
                                lcl_9 = _slot_0
                                lcl_8 = loc__(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = _slot_0
                        lcl_6 = lcl_6.value
                        lcl_7 = _slot_0
                        lcl_6 = loc__(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'primitive_pat got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 36):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = int(lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 37):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = float(lcl_3)
                lcl_4 = _slot_0
                lcl_3 = loc__(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'primitive_pat lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'primitive_pat got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__0(prim__state, prim__tokens):
        lcl_0 = parse_top__level(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__0(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__1(prim__state, prim__tokens):
        lcl_0 = parse_constr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__1(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__10(prim__state, prim__tokens):
        lcl_0 = parse_ID(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__10(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__5(prim__state, prim__tokens):
        lcl_0 = parse_binary__trailer(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__5(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__6(prim__state, prim__tokens):
        lcl_0 = parse_case(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__6(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__11(prim__state, prim__tokens):
        lcl_0 = parse_type__pair(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__11(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__2(prim__state, prim__tokens):
        lcl_0 = parse_type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__2(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__3(prim__state, prim__tokens):
        lcl_0 = parse_pat(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__3(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__4(prim__state, prim__tokens):
        lcl_0 = parse_pat__pair(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__4(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__7(prim__state, prim__tokens):
        lcl_0 = parse_mutual__case(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__7(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__8(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__8(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__9(prim__state, prim__tokens):
        lcl_0 = parse_expr__pair(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__9(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_row__expr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                _slot_local__1 = None
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 18
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote } not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_6 = _slot_0
                        lcl_5 = loc__(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'row_expr lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'row_expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_row__pat(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                _slot_local__1 = None
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_pat(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 18
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote } not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_6 = _slot_0
                        lcl_5 = loc__(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'row_pat lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'row_pat got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_row__type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                _slot_local__1 = None
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 18
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote } not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_6 = _slot_0
                        lcl_5 = loc__(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'row_type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'row_type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_top__level(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 4):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_2 = lcl_7
                            lcl_7 = prim__tokens.offset
                            _off_2 = lcl_7
                            lcl_7 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_7:
                                lcl_9 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_9 = lcl_9.idint
                                if (lcl_9 == 9):
                                    lcl_10 = parse_rbnf__list__1(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_12 = tuple(lcl_12)
                                        lcl_12 = (cons__k, lcl_12)
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 17):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 33):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 34):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 15):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 10):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 38):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 39):
                                    lcl_10 = parse_type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_10
                                    lcl_10 = _slot_3_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_3_check
                                    else:
                                        lcl_11 = _slot_3_check[1]
                                        lcl_11 = lcl_11
                                        _slot_3 = lcl_11
                                        lcl_11 = _slot_1
                                        lcl_12 = _slot_3
                                        lcl_11 = (type__k, lcl_11, lcl_12)
                                        lcl_12 = _slot_0
                                        lcl_11 = loc__(lcl_11, lcl_12)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                else:
                                    lcl_10 = (_off_2, 'top_level lookahead failed')
                                    lcl_10 = prim__cons(lcl_10, prim__nil)
                                    lcl_10 = lcl_10
                                    lcl_10 = (False, lcl_10)
                                    lcl_8 = lcl_10
                                lcl_7 = lcl_8
                            else:
                                lcl_10 = (_off_2, 'top_level got EOF')
                                lcl_10 = prim__cons(lcl_10, prim__nil)
                                lcl_10 = lcl_10
                                lcl_10 = (False, lcl_10)
                                lcl_7 = lcl_10
                            lcl_5 = lcl_7
                        else:
                            lcl_10 = _slot_1
                            lcl_10 = (type__k, lcl_10, None)
                            lcl_11 = _slot_0
                            lcl_10 = loc__(lcl_10, lcl_11)
                            _slot_local__1 = lcl_10
                            lcl_10 = (True, _slot_local__1)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    else:
                        lcl_10 = (_off_1, 'top_level got EOF')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_pat(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_3 = lcl_3.idint
                        if (lcl_3 == 4):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_2 = lcl_4
                            lcl_4 = parse_expr(prim__state, prim__tokens)
                            _slot_3_check = lcl_4
                            lcl_4 = _slot_3_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_3_check
                            else:
                                lcl_5 = _slot_3_check[1]
                                lcl_5 = lcl_5
                                _slot_3 = lcl_5
                                lcl_5 = _slot_1
                                lcl_6 = _slot_3
                                lcl_5 = (def__k, False, lcl_5, None, lcl_6)
                                lcl_6 = _slot_0
                                lcl_5 = loc__(lcl_5, lcl_6)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_12 = lcl_4
                        elif (lcl_3 == 5):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_2 = lcl_4
                            lcl_4 = parse_type(prim__state, prim__tokens)
                            _slot_3_check = lcl_4
                            lcl_4 = _slot_3_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_3_check
                            else:
                                lcl_5 = _slot_3_check[1]
                                lcl_5 = lcl_5
                                _slot_3 = lcl_5
                                lcl_5 = 4
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_5):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_5 = _py_local_tk
                                _slot_4 = lcl_5
                                lcl_5 = (_slot_4 is None)
                                if lcl_5:
                                    lcl_6 = prim__tokens.offset
                                    lcl_6 = (lcl_6, 'quote = not match')
                                    lcl_6 = prim__cons(lcl_6, prim__nil)
                                    lcl_6 = lcl_6
                                    lcl_6 = (False, lcl_6)
                                    lcl_5 = lcl_6
                                else:
                                    lcl_6 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_6
                                    lcl_6 = _slot_5_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_5_check
                                    else:
                                        lcl_7 = _slot_5_check[1]
                                        lcl_7 = lcl_7
                                        _slot_5 = lcl_7
                                        lcl_7 = _slot_1
                                        lcl_8 = _slot_3
                                        lcl_9 = _slot_5
                                        lcl_7 = (def__k, False, lcl_7, lcl_8, lcl_9)
                                        lcl_8 = _slot_0
                                        lcl_7 = loc__(lcl_7, lcl_8)
                                        _slot_local__1 = lcl_7
                                        lcl_7 = (True, _slot_local__1)
                                        lcl_6 = lcl_7
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            lcl_12 = lcl_4
                        else:
                            lcl_4 = (_off_1, 'top_level lookahead failed')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                            lcl_12 = lcl_4
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'top_level got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_pat(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_3 = lcl_3.idint
                        if (lcl_3 == 4):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_2 = lcl_4
                            lcl_4 = parse_expr(prim__state, prim__tokens)
                            _slot_3_check = lcl_4
                            lcl_4 = _slot_3_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_3_check
                            else:
                                lcl_5 = _slot_3_check[1]
                                lcl_5 = lcl_5
                                _slot_3 = lcl_5
                                lcl_5 = _slot_1
                                lcl_6 = _slot_3
                                lcl_5 = (def__k, True, lcl_5, None, lcl_6)
                                lcl_6 = _slot_0
                                lcl_5 = loc__(lcl_5, lcl_6)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_12 = lcl_4
                        elif (lcl_3 == 5):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_2 = lcl_4
                            lcl_4 = parse_type(prim__state, prim__tokens)
                            _slot_3_check = lcl_4
                            lcl_4 = _slot_3_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_3_check
                            else:
                                lcl_5 = _slot_3_check[1]
                                lcl_5 = lcl_5
                                _slot_3 = lcl_5
                                lcl_5 = 4
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_5):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_5 = _py_local_tk
                                _slot_4 = lcl_5
                                lcl_5 = (_slot_4 is None)
                                if lcl_5:
                                    lcl_6 = prim__tokens.offset
                                    lcl_6 = (lcl_6, 'quote = not match')
                                    lcl_6 = prim__cons(lcl_6, prim__nil)
                                    lcl_6 = lcl_6
                                    lcl_6 = (False, lcl_6)
                                    lcl_5 = lcl_6
                                else:
                                    lcl_6 = parse_expr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_6
                                    lcl_6 = _slot_5_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_5_check
                                    else:
                                        lcl_7 = _slot_5_check[1]
                                        lcl_7 = lcl_7
                                        _slot_5 = lcl_7
                                        lcl_7 = _slot_1
                                        lcl_8 = _slot_3
                                        lcl_9 = _slot_5
                                        lcl_7 = (def__k, True, lcl_7, lcl_8, lcl_9)
                                        lcl_8 = _slot_0
                                        lcl_7 = loc__(lcl_7, lcl_8)
                                        _slot_local__1 = lcl_7
                                        lcl_7 = (True, _slot_local__1)
                                        lcl_6 = lcl_7
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            lcl_12 = lcl_4
                        else:
                            lcl_4 = (_off_1, 'top_level lookahead failed')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                            lcl_12 = lcl_4
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'top_level got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'top_level lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'top_level got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 33):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__list__10(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 31
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote . not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = _slot_1
                            lcl_6 = tuple(lcl_6)
                            lcl_7 = _slot_3
                            lcl_6 = (forall__k, lcl_6, lcl_7)
                            lcl_7 = _slot_0
                            lcl_6 = loc__(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 34):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__list__10(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 31
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote . not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = _slot_1
                            lcl_6 = tuple(lcl_6)
                            lcl_7 = _slot_3
                            lcl_6 = (exist__k, lcl_6, lcl_7)
                            lcl_7 = _slot_0
                            lcl_6 = loc__(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 10):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_type__app(prim__state, prim__tokens):
        lcl_0 = parse_atom__type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_type__app(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_type__pair(prim__state, prim__tokens):
        lcl_0 = 39
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'LOWER not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 5):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_type(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_5 = lcl_5.value
                        lcl_6 = _slot_2
                        lcl_5 = (lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = lcl_4.value
                    lcl_5 = _slot_0
                    lcl_5 = lcl_5.value
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'type_pair got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
