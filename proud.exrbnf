START : <BOF> module_def <EOF> { $1 } ;

ID : <UPPER> { loc_(*$0, $0) }
   | <LOWER> { loc_(*$0, $0) }
   ;

module_def : 'module' ID list(top_level) { loc_((module_k, False, $1, $2), $0) } ;

top_level: 'let' pat '=' expr             { loc_((def_k, False, $1, None, $3), $0) }
         | 'let' pat ':' type '=' expr    { loc_((def_k, False, $1, $3, $5), $0) }
         | 'export' pat '=' expr          { loc_((def_k, True, $1, None, $3), $0) }
         | 'export' pat ':' type '=' expr { loc_((def_k, True, $1, $3, $5), $0) }

         | 'type' ID                   { loc_((type_k, $1, None), $0) }
         | 'type' ID '=' list(constr)  { loc_((type_k, $1, (cons_k, tuple($3))), $0) }
         | 'type' ID '=' type          { loc_((type_k, $1, $3), $0) }

         ;

constr : '|' <UPPER>                                   { loc_((call_k, *$1, ()), $1) }
       | '|' <UPPER> '(' separated_list(',', type) ')' { loc_((call_k, *$1, tuple($3)), $1) }
       | '|' <UPPER> ':' type '->' type                { loc_((ann_k, *$1, (arrow_k, $3, $5)), $1) }
       ;

primitive_pat : <LOWER>                                  { loc_(*$0, $0) }
              | <UPPER>                                  { loc_((call_k, $0), $0) }
              | <INT>                                    { loc_(int(*$0), $0) }
              | <FLOAT>                                  { loc_(float(*$0), $0) }
              | <STRING>                                 { loc_(DQString(*$0), $0) }
              | <LOWER> '(' separated_list(',', pat) ')' { loc_((uncall_k, *$0, $2), $0) }
              | <UPPER> '(' separated_list(',', pat) ')' { loc_((call_k, *$0, $2), $0) }
              | '^' expr                                 { loc_((pin_k, $1), $0) }
              | 'when' expr                              { loc_((guard_k, $1), $0) }
              | '(' ')'                                  { loc_((tuple_k, ()), $0) }
              | '(' separated_list(',', pat) ')'         { loc_((tuple_k, $1), $0) }
              | '[' ']'                                  { loc_((list_k, ()), $0) }
              | '[' separated_list(',', pat) ']'         { loc_((list_k, $1), $0) }
              | '{' '}'                                  { loc_((record_k, ()), $0) }

              | '{' separated_list(',', pat_pair) row_pat  { loc_((record_k, $1, $2), $0) }
              ;

row_pat   : '}'           { None }
          | '|' pat '}'   { loc_($1, $0) }
          ;

pat_pair : <LOWER> '=' pat { loc_((pair_k, *$0, $2), $0) }
         | <LOWER>
         ;

and_pat  : and_pat 'and' primitive_pat { loc_((and_k, $0, $2), $1) }
         | primitive_pat               { $0 }
         ;

pat : pat 'or' and_pat { loc_((or_k, $0, $2), $1) }
    | and_pat          { $0 }
    ;

binary_operator : ('^' | '::' | <OP> | 'and' | 'or' | '==') { $0 };

binary_trailer    : binary_operator call_expr { (loc_(*$0, $0), $1) } ;

binary_operations : call_expr   { $0 }
                  | call_expr list(binary_trailer) { (bin_k, $0, tuple($1)) }
                  ;

expr : 'let' pat '=' expr 'in' expr                  { loc_((let_k, False, $1, None, $3, $5), $0) }
     | 'let' pat ':' type '=' expr 'in' expr         { loc_((let_k, False, $1, $3, $5, $7), $0) }
     | 'rec' pat '=' expr 'in' expr                  { loc_((let_k, True, $1, None, $3, $5), $0) }
     | 'rec' pat ':' type '=' expr 'in' expr         { loc_((let_k, True, $1, $3, $5, $7), $0) }
     | '|' lambda                                    { loc_($1, $0) }
     | expr 'match' list(case)                       { loc_((match_k, $0, tuple($2)), $1) }
     | binary_operations                             { $0 }
     ;

case : '|' pat '->' expr { loc_((case_k, $1, $3), $2)  };

lambda : pat lambda_typed lambda_body { (lambda_k, $0, $1, $2) };

lambda_body : '->' expr { loc_($1, $0) }
            ;

lambda_typed : ':' type '|' {  $1  }
             | '|'          { None }
             ;

call_expr : call_expr atom      { (call_k, $0, $1) }
          | call_expr ':' type  { loc_((ann_k, $0, $2), $1)  }
          | atom                { $0 }
          ;

atom      : '(' ')'             { loc_((tuple_k, ()), $0) }
          | '[' ']'             { loc_((list_k, ()), $0) }
          | '{' '}'             { loc_((record_k, ()), $0) }
          | 'True'              { loc_(True, $0) }
          | 'False'             { loc_(False, $0) }
          | '[' separated_list(',', expr) ']'        { loc_((list_k, tuple($1)), $0) }
          | '(' separated_list(',', expr) ')'        { loc_((tuple_k, tuple($1)), $0) }
          | ID                                       { $0 }
          | <INT>                                    { loc_(int(*$0), $0) }
          | <FLOAT>                                  { loc_(float(*$0), $0) }
          | <STRING>                                 { loc_(DQString(*$0), $0) }
          | '`' atom                                 { loc_((quote_k, $1), $0) }
          | '$' atom                                 { loc_((unquote_k, $1), $0) }
          | atom '.' ID                              { loc_((attr_k, $0, $2), $1) }
          | 'coerce' atom                            { loc_((coerce_k, $1), $0) }

          | '{' separated_list(',', expr_pair) row_expr  { loc_((record_k, tuple($1), $2), $0) }
          ;

row_expr  : '}'            { None }
          | '|' expr '}'   { loc_($1, $0) }
          ;

expr_pair : <LOWER> '=' expr { loc_((pair_k, *$0, $2), $0) }
          | <LOWER>
          ;

type : 'forall' list(ID) '.' type  { loc_((forall_k, tuple($1), $3), $0) }
     | 'exist' list(ID) '.' type   { loc_((exist_k, tuple($1), $3), $0) }
     | arrow_type                  { $0 }
     ;

arrow_type : type_app              { $0 }
           | type_app '->' type    { loc_((arrow_k, $0, $2), $1) }
           | type_app '=>' type    { loc_((imply_k, $0, $2), $1) }
           ;

type_app : type_app atom_type      { (call_k, $0, $1) }
         | atom_type               { $0 }
         ;

atom_type : '(' separated_list(',', type) ')'   { loc_((tuple_k, tuple($1)), $0) }
          | '(' ')'                             { loc_((tuple_k, ()), $0) }
          | '{' '}'                             { loc_((record_k, ()), $0) }
          # `[]` is for type constructor
          | '[' ']'                             { loc_((list_k, None), $0) }
          | '[' type ']'                        { loc_((list_k, $1), $0) }
          | ID                                  { $0 }
          | '{' separated_list(',', type_pair) row_type  { loc_((record_k, $1, tuple($2)), $0) }
          ;

row_type  : '}'            { None }
          | '|' type '}'   { loc_($1, $0) }
          ;

type_pair : <LOWER> ':' type { loc_((pair_k, *$0, $2), $0) }
          | <LOWER>
          ;